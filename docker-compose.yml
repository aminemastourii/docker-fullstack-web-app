version: "3.8"
services:

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    depends_on:
      - api
    networks:
      - frontend
      - backend
    volumes:
      - ./client:/app
      - /app/node_modules  

  nginx:
    restart: always
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports:
      - "8080:80"
    depends_on:
      - api
      - client  
    networks:
      - frontend
      - backend  

  api:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    ports:
      - "8081:5000"         
    volumes:
      - ./server:/app
      - /app/node_modules
    environment:
       PGUSER: amine
       PGHOST: pg
       PGDATABASE: my_db
       PGPASSWORD: mastouri
       PGPORT: 5432
       REDIS_HOST: redis
       REDIS_PORT: 6379
       
    depends_on:
      pg:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend  

  redis:
    image: redis:latest
    restart: always
    networks:
      - backend  

  pg:
    image: postgres:latest
    restart: always
    environment:
       POSTGRES_USER: amine
       POSTGRES_PASSWORD: mastouri
       POSTGRES_DB: my_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U amine -d my_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend  

  worker:
    build: 
      context: ./worker
      dockerfile: Dockerfile.dev
    depends_on:
      - redis
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - backend
    volumes:
      - /app/node_modules
      - ./worker:/app  

networks:
  backend:
  frontend:


    